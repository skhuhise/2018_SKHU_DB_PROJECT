<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
			"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="skhu.mapper.GraduationSubjectMapper">
	<select id="findByCommon" resultMap="graduationSubjectSimpleResultMap">
		select g.*, s.id subjectId, s.code, s.name subjectName, s.score from graduation_subject g
		left join subject s on g.subjectId = s.id
		where g.departmentId = 1 and g.graduationId = 1
		order by g.year asc
	</select>
	<select id="findByDepartment" resultMap="graduationSubjectSimpleResultMap">
		select g.*, s.id subjectId, s.code code, s.name subjectName, s.score score from graduation_subject g
		left join subject s on s.id = g.subjectId
		where g.departmentId = #{ departmentId } and g.year = #{ year }
		order by g.graduationId, g.note
	</select>
	<select id="findById" resultMap="graduationSubjectSimpleResultMap">
		select g.*, s.id subjectId, s.code, s.name subjectName, s.score from graduation_subject g
		left join subject s on g.subjectId = s.id
		where g.id = #{ id }
	</select>
	<select id="findByBasic" resultMap="graduationSubjectDetailResultMap">
		select gs.*, sj.id subjectId, sj.code, sj.name subjectName, sj.score,
		sd.id detailId, sd.title title, sd.subtitle subtitle
		from graduation_subject gs
		left join subject sj on gs.subjectId = sj.id
		left join subject_detail sd on gs.subjectId = sd.id
		where 
			gs.departmentId = 1 and gs.graduationId= 1 and
			(gs.year = #{ year } or gs.year = '0');
	</select>
	<resultMap id="graduationSubjectSimpleResultMap" type="GraduationSubject">
		<id property="id" column="id" />
		<result property="year" column="year" />
		<result property="semester" column="semester" />
		<result property="note" column="note" />
		<result property="essential" column="essential" />
		<result property="departmentId" column="departmentId" />
		<result property="graduationId" column="graduationId" />
		<result property="subjectId" column="subjectId" />
		<association property="subject" javaType="Subject">
			<id property="id" column="subjectId" />
			<result property="code" column="code" />
			<result property="name" column="subjectName" />
			<result property="score" column="score" />
		</association>
	</resultMap>
	<resultMap id="graduationSubjectDetailResultMap" type="GraduationSubject">
		<id property="id" column="id" />
		<result property="year" column="year" />
		<result property="semester" column="semester" />
		<result property="note" column="note" />
		<result property="essential" column="essential" />
		<result property="departmentId" column="departmentId" />
		<result property="graduationId" column="graduationId" />
		<result property="subjectId" column="subjectId" />
		<association property="subject" javaType="Subject">
			<id property="id" column="subjectId" />
			<result property="code" column="code" />
			<result property="name" column="subjectName" />
			<result property="score" column="score" />
			<association property="subjectDetail" javaType="SubjectDetail">
				<id property="id" column="detailId" />
				<result property="title" column="title" />
				<result property="subtitle" column="subtitle" />
			</association>
		</association>
	</resultMap>
	<select id="findByOption" resultMap="graduationSubjectResultMap">
		select gs.*, g.id graduationId, g.name graduationName, g.division graduationDivision, 
		s.id subjectId, s.year subjectYear, s.code, s.subjectClass, s.name subjectName, s.score, s.division subjectDivision,
		d.id departmentId, d.name departmentName
		from graduation_subject gs
		left join subject s on gs.subjectId = s.id
		left join department d on gs.departmentId = d.id
		left join graduation g on gs.graduationId = g.id
		<where>
			<if test='searchText != null and searchText != ""'>
				and gs.year like #{ searchText }
			</if>
			<if test="condition.departmentId != 0">
				and gs.departmentId = #{ condition.departmentId }
			</if>
			<if test="condition.graduationId != 0">
				and gs.graduationId = #{ condition.graduationId }
			</if>
		</where>
		limit #{start}, #{end}
	</select>
	<select id="countByOption" resultType="int">
		select count(*) from graduation_subject gs
		left join subject s on gs.subjectId = s.id
		left join department d on gs.departmentId = d.id
		left join graduation g on gs.graduationId = g.id
		<where>
			<if test='searchText != null and searchText != ""'>
				and gs.year like #{ searchText }
			</if>
			<if test="condition.departmentId != 0">
				and gs.departmentId = #{ condition.departmentId }
			</if>
			<if test="condition.graduationId != 0">
				and gs.graduationId = #{ condition.graduationId }
			</if>
		</where>
	</select>
	<select id="findByStudent" resultMap="graduationSubjectResultMap">
		select gs.*, g.id graduationId, g.name graduationName, g.division graduationDivision, 
		s.id subjectId, s.year subjectYear, s.code code, s.subjectClass subjectClass, s.name subjectName, s.score, s.division subjectDivision,
		d.id departmentId, d.name departmentName
		from graduation_subject gs
		left join graduation g on gs.graduationId = g.id
		left join subject s on gs.subjectId = s.id
		left join department d on gs.departmentId = d.id
		where
			gs.year = #{ year } and 
			((gs.graduationId = 1 and gs.departmentId = 1) or
			(gs.departmentId = #{ student.departmentId } and
			(g.id = #{ mainGraduationId } or g.id = #{ subGraduationId })))
			<if test='student.minor != "0" and student.minor != null'>
				or (gs.year = #{ year } and d.id = #{ minorId } and g.id = #{ differentDepartmentGraduationId })
			</if>
			<if test='student.doubleMajor != "0" and student.doubleMajor != null'>
				or (gs.year = #{ year } and d.id = #{ doubleMajorId } and g.name = #{ differentDepartmentGraduationId })
			</if>
		order by gs.graduationId, gs.departmentId
	</select>
	<resultMap id="graduationSubjectResultMap" type="GraduationSubject">
		<id property="id" column="id" />
		<result property="year" column="year" />
		<result property="semester" column="semester" />
		<result property="note" column="note" />
		<result property="essential" column="essential" />
		<result property="departmentId" column="departmentId" />
		<result property="graduationId" column="graduationId" />
		<result property="subjectId" column="subjectId" />
		<association property="graduation" javaType="Graduation">
			<id property="id" column="graduationId" />
			<result property="name" column="graduationName" />
			<result property="division" column="graduationDivision" />
		</association>
		<association property="subject" javaType="Subject">
			<id property="id" column="subjectId" />
			<result property="year" column="subjectYear" />
			<result property="code" column="code" />
			<result property="subjectClass" column="subjectClass" />
			<result property="name" column="subjectName" />
			<result property="score" column="score" />
			<result property="division" column="subjectDivision" />
		</association>
		<association property="department" javaType="Department">
			<id property="id" column="departmentId" />
			<result property="name" column="departmentName" />
		</association>
	</resultMap>
	<update id="update">
		update graduation_subject
		<set>
			<if test="year != null">
				year = #{ year },
			</if>
			<if test="departmentId != 0 and departmentId != null">
				departmentId = #{ departmentId },
			</if>
			<if test="graduationId != 0 and graduationId != null">
				graduationId = #{ graduationId },
			</if>
			<if test="subjectId != 0 and subjectId != null">
				subjectId = #{ subjectId },
			</if>
			<if test="semester != null">
				semester = #{ semester },
			</if>
			<if test='note != null and note != ""'>
				note = #{ note },
			</if>
			<if test="essential != null">
				essential = #{ essential }
			</if>
		</set>
		where id = #{ id }
	</update>
	<delete id="delete">
		delete from graduation_subject where id = #{id}
	</delete>
	<insert id="insert">
		insert into graduation_subject(year, departmentId, graduationId, subjectId, semester, note, essential)
		values(#{ year }, #{ departmentId }, #{ graduationId }, #{ subjectId }, #{ semester }, #{ note }, #{ essential });
	</insert>
</mapper>