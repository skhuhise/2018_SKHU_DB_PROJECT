<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
			"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="skhu.mapper.StudentMapper">

	<select id="findAll" resultType="Student">
		select * from student
	</select>
	<select id="login" resultType="Student">
		select id, studentNumber, name, year, semester, departmentId, email, graduation, minor, doubleMajor, majorEssential, liberalEssential
		from student 
		where studentNumber = #{studentNumber} and password = #{password};
	</select>
	<select id="findAllWithCounseling" resultMap="counselingResultMap">
		select s.id, s.studentNumber, s.name studentName, d.id departmentId, d.name departmentName, a.id actionId, max(a.date) date from student s 
		left join action a on s.id = a.studentId
		left join department d on s.departmentId = d.id
		<where>
			<if test="#{student.departmentId}">
			</if>
		</where> d.id = #{student.departmentId} and s.studentNumber = #{student.studentNumber} and s.name = #{student.name}
		group by s.studentNumber
	</select>
	<resultMap id="counselingResultMap" type="Student">
		<id property="id" column="id" />
		<result property="studentNumber" column="studentNumber" />
		<result property="name" column="name" />
		<result property="year" column="year" />
		<result property="semester" column="semester" />
		<result property="email" column="email" />
		<result property="graduation" column="graduation" />
		<result property="minor" column="minor" />
		<result property="doubleMajor" column="doubleMajor" />
		<result property="majorEssential" column="majorEssential" />
		<result property="liberalEssential" column="liberalEssential" />
		<result property="departmentId" column="departmentId" />
		<association property="department" javaType="Department">
			<id property="id" column="departmentId" />
			<result property="name" column="departmentName" />		
		</association>
		<collection property="action" ofType="Action">
				<id property="id" column="actionId" />
				<result property="name" column="actionName" />
				<result property="content" column="content" />
				<result property="date" column="date" />
			</collection>
	</resultMap>
	<select id="findAllWithDepartment" resultMap="studentListResultMap">
		select s.*, d.id departmentId, d.name departmentName, d.collegeId 
		from student s
		left join department d on s.departmentId = d.id
	</select>
	<resultMap id="studentListResultMap" type="Student">
		<id property="id" column="id" />
		<result property="studentNumber" column="studentNumber" />
		<result property="name" column="name" />
		<result property="year" column="year" />
		<result property="semester" column="semester" />
		<result property="email" column="email" />
		<result property="graduation" column="graduation" />
		<result property="minor" column="minor" />
		<result property="doubleMajor" column="doubleMajor" />
		<result property="majorEssential" column="majorEssential" />
		<result property="liberalEssential" column="liberalEssential" />
		<result property="departmentId" column="departmentId" />
		<association property="department" javaType="Department">
			<id property="id" column="departmentId" />
			<result property="name" column="departmentName" />
		</association>
	</resultMap>
	<select id="findById" resultMap="studentResultMap">
		select s.*, d.id departmentId, d.name departmentName, d.collegeId from student s
		left join department d on s.departmentId = d.id
		where s.id = #{id}
	</select>
	<resultMap id="studentResultMap" type="Student">
		<id property="id" column="id" />
		<result property="studentNumber" column="studentNumber" />
		<result property="name" column="name" />
		<result property="year" column="year" />
		<result property="semester" column="semester" />
		<result property="email" column="email" />
		<result property="graduation" column="graduation" />
		<result property="minor" column="minor" />
		<result property="doubleMajor" column="doubleMajor" />
		<result property="majorEssential" column="majorEssential" />
		<result property="liberalEssential" column="liberalEssential" />
		<result property="departmentId" column="departmentId" />
		<association property="department" javaType="Department">
			<id property="id" column="departmentId" />
			<result property="name" column="departmentName" />
			<result property="graduationId" column="graduationId" />
		</association>
	</resultMap>
	<select id="findByAccount" resultType="Student">
		select id from student 
		where name = #{name} and studentNumber = #{studentNumber}
	</select>
	<!-- where절이랑 resultmap 잘 추가해서 하면 됨 + mapper.java 추가
	<select id="findByAction" resultMap="counselingResultMap">
		select s.id, s.studentNumber, s.name studentName, 
			d.id departmentId, d.name departmentName, 
			a.id actionId, max(a.date) date 
		from student s 
		left join action a on s.id = a.studentId
		left join department d on s.departmentId = d.id
		group by s.id;
	</select>
	 -->
	<select id="findByGraduation" resultMap="graduationListResultMap">
		select s.id, s.studentNumber, s.name, s.year, s.semester, s.majorEssential, s.liberalEssential,
			d.id departmentId, d.name departmentName,
			g.id graduationId, g.name graduationName, max(g.score) score, g.year graduationYear
		from student s
		left join department d on s.departmentId = d.id
		left join graduation_grade g on s.departmentId = g.departmentId
		<where>
			<if test="condition.departmentId != 0 and condition.departmentId != null">
				and d.id = #{condition.departmentId}
			</if>
			<if test='searchType == "0" and searchText != null and searchText != ""'>
				and s.studentNumber like #{searchText}
			</if>
			<if test='searchType == "1" and searchText != null and searchText != ""'>
				and s.name like #{searchText}
			</if>
			<if test='condition.year != null and condition.year != "0"'>
				and s.year = #{condition.year}
			</if>
			<if test="condition.semester != 0 and condition.semester != null">
				and s.semester = #{condition.semester}
			</if>
			<if test="majorCheck or minorCheck">
				and (d.id in (1, d.id) and
		   		left(s.studentNumber, 4) = g.year)
		    	<if test="majorCheck">
		    		and g.name like '전공필수'
		    		and g.score > s.majorEssential 
		    	</if>
		    	<if test="minorCheck">
		    		and g.name like '교양필수'
		    		and g.score > s.liberalEssential 
		    	</if>
			</if>
		</where>
		group by s.id
		limit #{start}, #{end}
	</select>
	<resultMap id="graduationListResultMap" type="Student">
		<id property="id" column="id" />
		<result property="studentNumber" column="studentNumber" />
		<result property="name" column="name" />
		<result property="year" column="year" />
		<result property="semester" column="semester" />
		<result property="majorEssential" column="majorEssential" />
		<result property="liberalEssential" column="liberalEssential" />
		<result property="departmentId" column="departmentId" />
		<association property="department" javaType="Department">
			<id property="id" column="departmentId" />
			<result property="name" column="departmentName" />
			<collection property="graduationGrades" ofType="GraduationGrade">
				<id property="id" column="graduationId" />
				<result property="name" column="graduationName" />
				<result property="score" column="score" />
				<result property="year" column="graduationYear" />
			</collection>
		</association>
	</resultMap>
	<select id="countByGraduation" resultType="int">
		select count(*) from student s
		left join department d on s.departmentId = d.id
		left join graduation_grade g on s.departmentId = g.departmentId
		<where>
			<if test="condition.departmentId != 0 and condition.departmentId != null">
				and d.id = #{condition.departmentId}
			</if>
			<if test='searchType == "0" and searchText != null and searchText != ""'>
				and s.studentNumber like #{searchText}
			</if>
			<if test='searchType == "1" and searchText != null and searchText != ""'>
				and s.name like #{searchText}
			</if>
			<if test='condition.year != null and condition.year != "0"'>
				and s.year = #{condition.year}
			</if>
			<if test="condition.semester != 0 and condition.semester != null">
				and s.semester = #{condition.semester}
			</if>
			<if test="majorCheck or minorCheck">
				and (d.id in (1, d.id) and
		   		left(s.studentNumber, 4) = g.year)
		    	<if test="majorCheck">
		    		and g.name like '전공필수'
		    		and g.score > s.majorEssential 
		    	</if>
		    	<if test="minorCheck">
		    		and g.name like '교양필수'
		    		and g.score > s.liberalEssential 
		    	</if>
			</if>
		</where>
	</select>
	<update id="update">
		update student
		<set>
			<if test='password != null and password != ""'>
				password = #{password}
			</if>
			<if test='name != null and name != ""'>
				name = #{name}
			</if>
			<if test="year != null and year != 0">
				, year = #{year}
			</if>
			<if test="departmentId != 0 and departmentId != null">
				, departmentId = #{departmentId}
			</if>
			<if test='email != null and email != ""'>
				, email = #{email}
			</if>
			<if test="semester != null and semester != 0">
				, semester = #{semester}
			</if>
			<if test='graduation != null and graduation != "0" and graduation != ""'>
				, graduation = #{graduation}
			</if>
			<if test='minor != null and minor != "0" and minor != ""'>
				, minor = #{minor}
			</if>
			<if test='doubleMajor != null doubleMajor != "0" doubleMajor != ""'>
				, doubleMajor = #{doubleMajor}
			</if>
			<if test="majorEssential != null majorEssential != 0">
				, majorEssential = #{majorEssential}
			</if>
			<if test="liberalEssential != null and liberalEssential != 0">
				, liberalEssential = #{liberalEssential}
			</if>
		</set>
		where id = #{id}
	</update>
	<insert id="insert" useGeneratedKeys="true" keyProperty="id">
		insert
		into student(studentNumber, password, name, year, departmentId, email, semester, graduation, minor, doubleMajor, majorEssential, liberalEssential)
		values(#{studentNumber}, #{password}, #{name}, #{year}, #{departmentId}, #{email}, 0, '0', '0', '0', 0, 0);
	</insert>
	<delete id="delete">
		DELETE FROM student WHERE id = #{id}
	</delete>

</mapper>