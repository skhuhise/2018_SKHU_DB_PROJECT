<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
			"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="skhu.mapper.GraduationGradeMapper">
	<select id="findByCommon" resultType="GraduationGrade">
		select * from graduation_grade
		where departmentId = 1 and graduationId = 1
		order by year asc
	</select>
	<select id="findYear" resultType="GraduationGrade">
		select distinct year from graduation_grade where departmentId = #{ departmentId } order by year
	</select>
	<select id="findByDepartment" resultType="GraduationGrade">
		select * from graduation_grade
		where departmentId = #{ departmentId } and year = #{ year }
		order by graduationId
	</select>
	<select id="findByOption" resultMap="graduationGradeResultMap">
		select gg.*, 
		d.id departmentId, d.name departmentName,
		g.id graduationId, g.name graduationName, g.division
		from graduation_grade gg
		left join department d on d.id = gg.departmentId
		left join graduation g on g.id = gg.graduationId
		<where>
			<if test='searchText != null and searchText != ""'>
				and gg.year like #{ searchText }
			</if>
			<if test="condition.departmentId != 0">
				and gg.departmentId = #{ condition.departmentId }
			</if>
			<if test="condition.graduationId != 0">
				and gg.graduationId = #{ condition.graduationId }
			</if>
		</where>
	</select>
	<select id="countByOption" resultType="int">
		select count(*) from graduation_grade gg
		left join department d on d.id = gg.departmentId
		left join graduation g on g.id = gg.graduationId
		<where>
			<if test='searchText != null and searchText != ""'>
				and gg.year like #{ searchText }
			</if>
			<if test="condition.departmentId != 0">
				and gg.departmentId = #{ condition.departmentId }
			</if>
			<if test="condition.graduationId != 0">
				and gg.graduationId = #{ condition.graduationId }
			</if>
		</where>
	</select>
	<select id="findById" resultType="graduationGrade">
		select * from graduation_grade where id = #{ id }
	</select>
	<select id="findByOptionId" resultMap="graduationGradeResultMap">
		select gg.*, g.id graduationId, g.name graduationName, g.division,
		d.id departmentId, d.name departmentName
		from graduation_grade gg
		left join department d on gg.departmentId = d.id
		left join graduation g on gg.graduationId = g.id
		where
			gg.year = #{ year } and 
			((gg.graduationId = 1 and gg.departmentId = 1) or
			(gg.departmentId = #{ student.departmentId } and
			(g.id = #{ mainGraduation } or g.id = #{ subGraduation })))
			or (d.id = #{ minor } and g.id = #{ subGraduation })
			or (d.name = #{ student.doubleMajor } and g.name = #{ subGraduation })
		order by g.id
	</select>
	<select id="findByStudent" resultMap="graduationGradeResultMap">
		select gg.*, g.id graduationId, g.name graduationName, g.division,
		d.id departmentId, d.name departmentName
		from graduation_grade gg
		left join department d on gg.departmentId = d.id
		left join graduation g on gg.graduationId = g.id
		where
			gg.year = #{ year } and 
			((gg.graduationId = 1 and gg.departmentId = 1) or
			(gg.departmentId = #{ student.departmentId } and
			(g.id = #{ mainGraduationId } or g.id = #{ subGraduationId })))
			<if test='student.minor != "0"'>
				or (d.id = #{ minorId } and g.id = #{ differentDepartmentGraduationId })
			</if>
			<if test='student.doubleMajor != "0"'>
				or (d.id = #{ doubleMajorId } and g.id = #{ differentDepartmentGraduationId })
			</if>
		order by g.id
	</select>
	<resultMap id="graduationGradeResultMap" type="GraduationGrade">
		<id property="id" column="id" />
		<result property="year" column="year" />
		<result property="name" column="name" />
		<result property="score" column="score" />
		<result property="note" column="note" />
		<result property="departmentId" column="departmentId" />
		<result property="graduationId" column="graduationId" />
		<association property="graduation" javaType="Graduation">
			<id property="id" column="graduationId" />
			<result property="name" column="graduationName" />
			<result property="division" column="division" />
		</association>
		<association property="department" javaType="Department">
			<id property="id" column="departmentId" />
			<result property="name" column="departmentName" />
		</association>
	</resultMap>
	<update id="update">
		update graduation_grade
		<set>
			<if test="year != null">
				year = #{ year },
			</if>
			<if test="departmentId != 0 and departmentId != null">
				departmentId = #{ departmentId },
			</if>
			<if test="graduationId != 0 and graduationId != null">
				graduationId = #{ graduationId },
			</if>
			<if test="name != null">
				name = #{ name },
			</if>
			<if test="score != null">
				score = #{ score },
			</if>
			<if test="note != null">
				note = #{ note }
			</if>
		</set>
		where id = #{ id }
	</update>
	<delete id="delete">
		delete from graduation_grade where id = #{id}
	</delete>
	<insert id="insert">
		insert into graduation_grade(year, departmentId, graduationId, name, score, note)
		values(#{ year }, #{ departmentId }, #{ graduationId }, #{ name }, #{ score }, #{ note });
	</insert>
</mapper>